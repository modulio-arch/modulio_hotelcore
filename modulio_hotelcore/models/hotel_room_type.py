# -*- coding: utf-8 -*-

from odoo import models, fields, api
from datetime import timedelta


class HotelRoomType(models.Model):
    _name = 'hotel.room.type'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _description = 'Hotel Room Type'
    _order = 'sequence, name'

    name = fields.Char(
        string='Room Type Name',
        required=True,
        tracking=True,
        help='Name of the room type (e.g., Standard, Deluxe, Suite)'
    )
    code = fields.Char(
        string='Code',
        required=True,
        tracking=True,
        help='Short code for the room type'
    )
    description = fields.Text(
        string='Description',
        help='Detailed description of the room type'
    )
    max_occupancy = fields.Integer(
        string='Max Occupancy',
        default=2,
        help='Maximum number of guests that can occupy this room type'
    )
    size_sqm = fields.Float(
        string='Size (sqm)',
        help='Room size in square meters'
    )
    base_price = fields.Monetary(
        string='Base Price',
        currency_field='currency_id',
        tracking=True,
        help='Base price for this room type'
    )
    currency_id = fields.Many2one(
        'res.currency',
        string='Currency',
        default=lambda self: self.env.company.currency_id,
        required=True,
        ondelete='restrict'
    )
    amenities = fields.Text(
        string='Amenities',
        help='List of amenities included in this room type'
    )
    sequence = fields.Integer(
        string='Sequence',
        default=10,
        help='Order of room types in lists'
    )
    room_count = fields.Integer(
        string='Room Count',
        compute='_compute_room_count',
        store=True,
        help='Number of rooms of this type'
    )
    room_ids = fields.One2many(
        'hotel.room',
        'room_type_id',
        string='Rooms',
        help='Rooms of this type'
    )

    # Enhanced Analytics Fields
    # Revenue Analytics
    total_revenue = fields.Monetary(
        string='Total Revenue',
        currency_field='currency_id',
        compute='_compute_revenue_analytics',
        store=True,
        help='Total revenue generated by this room type'
    )
    monthly_revenue = fields.Monetary(
        string='Monthly Revenue',
        currency_field='currency_id',
        compute='_compute_revenue_analytics',
        store=True,
        help='Revenue generated this month'
    )
    daily_revenue = fields.Monetary(
        string='Daily Revenue',
        currency_field='currency_id',
        compute='_compute_revenue_analytics',
        store=True,
        help='Revenue generated today'
    )
    average_daily_rate = fields.Monetary(
        string='Average Daily Rate (ADR)',
        currency_field='currency_id',
        compute='_compute_revenue_analytics',
        store=True,
        help='Average daily rate for this room type'
    )
    revenue_per_available_room = fields.Monetary(
        string='RevPAR',
        currency_field='currency_id',
        compute='_compute_revenue_analytics',
        store=True,
        help='Revenue per available room'
    )

    # Occupancy Analytics
    occupancy_rate = fields.Float(
        string='Occupancy Rate (%)',
        compute='_compute_occupancy_analytics',
        store=True,
        help='Current occupancy rate percentage'
    )
    monthly_occupancy_rate = fields.Float(
        string='Monthly Occupancy Rate (%)',
        compute='_compute_occupancy_analytics',
        store=True,
        help='Monthly occupancy rate percentage'
    )
    total_nights_sold = fields.Integer(
        string='Total Nights Sold',
        compute='_compute_occupancy_analytics',
        store=True,
        help='Total number of nights sold'
    )
    monthly_nights_sold = fields.Integer(
        string='Monthly Nights Sold',
        compute='_compute_occupancy_analytics',
        store=True,
        help='Number of nights sold this month'
    )
    average_length_of_stay = fields.Float(
        string='Average Length of Stay',
        compute='_compute_occupancy_analytics',
        store=True,
        help='Average length of stay in nights'
    )

    # Performance Metrics
    booking_count = fields.Integer(
        string='Total Bookings',
        compute='_compute_performance_metrics',
        store=True,
        help='Total number of bookings for this room type'
    )
    monthly_booking_count = fields.Integer(
        string='Monthly Bookings',
        compute='_compute_performance_metrics',
        store=True,
        help='Number of bookings this month'
    )
    cancellation_rate = fields.Float(
        string='Cancellation Rate (%)',
        compute='_compute_performance_metrics',
        store=True,
        help='Cancellation rate percentage'
    )
    no_show_rate = fields.Float(
        string='No-Show Rate (%)',
        compute='_compute_performance_metrics',
        store=True,
        help='No-show rate percentage'
    )
    customer_satisfaction_score = fields.Float(
        string='Customer Satisfaction Score',
        compute='_compute_performance_metrics',
        store=True,
        help='Average customer satisfaction score (1-5)'
    )

    # Pricing Analytics
    min_price = fields.Monetary(
        string='Min Price',
        currency_field='currency_id',
        compute='_compute_pricing_analytics',
        store=True,
        help='Minimum price charged for this room type'
    )
    max_price = fields.Monetary(
        string='Max Price',
        currency_field='currency_id',
        compute='_compute_pricing_analytics',
        store=True,
        help='Maximum price charged for this room type'
    )
    price_variance = fields.Monetary(
        string='Price Variance',
        currency_field='currency_id',
        compute='_compute_pricing_analytics',
        store=True,
        help='Price variance from base price'
    )
    seasonal_demand_factor = fields.Float(
        string='Seasonal Demand Factor',
        compute='_compute_pricing_analytics',
        store=True,
        help='Seasonal demand factor (1.0 = normal, >1.0 = high demand)'
    )

    # Market Position
    market_share = fields.Float(
        string='Market Share (%)',
        compute='_compute_market_analytics',
        store=True,
        help='Market share percentage'
    )
    competitive_index = fields.Float(
        string='Competitive Index',
        compute='_compute_market_analytics',
        store=True,
        help='Competitive position index (0-100)'
    )
    demand_forecast = fields.Float(
        string='Demand Forecast',
        compute='_compute_market_analytics',
        store=True,
        help='Forecasted demand for next 30 days'
    )

    # Advanced Features
    is_premium = fields.Boolean(
        string='Premium Room Type',
        default=False,
        help='Mark as premium room type'
    )
    is_suite = fields.Boolean(
        string='Suite',
        default=False,
        help='Mark as suite room type'
    )
    is_connecting = fields.Boolean(
        string='Connecting Rooms Available',
        default=False,
        help='Can be connected to other rooms'
    )
    pet_friendly = fields.Boolean(
        string='Pet Friendly',
        default=False,
        help='Allows pets'
    )
    smoking_allowed = fields.Boolean(
        string='Smoking Allowed',
        default=False,
        help='Allows smoking'
    )
    wheelchair_accessible = fields.Boolean(
        string='Wheelchair Accessible',
        default=False,
        help='Wheelchair accessible'
    )

    # Amenities and Features
    amenity_ids = fields.Many2many(
        'hotel.amenity',
        'hotel_room_type_amenity_rel',
        'room_type_id',
        'amenity_id',
        string='Amenities',
        help='Amenities included in this room type'
    )
    amenity_count = fields.Integer(
        string='Amenity Count',
        compute='_compute_amenity_count',
        store=True,
        help='Number of amenities included'
    )

    # Maintenance and Operations
    maintenance_frequency = fields.Selection([
        ('daily', 'Daily'),
        ('weekly', 'Weekly'),
        ('monthly', 'Monthly'),
        ('quarterly', 'Quarterly'),
        ('as_needed', 'As Needed'),
    ], string='Maintenance Frequency', default='as_needed',
       help='Recommended maintenance frequency')
    
    maintenance_cost_per_room = fields.Monetary(
        string='Maintenance Cost per Room',
        currency_field='currency_id',
        help='Average maintenance cost per room per month'
    )
    
    last_maintenance_date = fields.Date(
        string='Last Maintenance Date',
        compute='_compute_maintenance_info',
        store=True,
        help='Date of last maintenance'
    )
    
    maintenance_due = fields.Boolean(
        string='Maintenance Due',
        compute='_compute_maintenance_info',
        store=True,
        help='Whether maintenance is due'
    )

    # Reporting and Analytics
    last_updated_analytics = fields.Datetime(
        string='Last Analytics Update',
        compute='_compute_analytics_timestamp',
        store=True,
        help='When analytics were last updated'
    )
    
    analytics_period = fields.Selection([
        ('daily', 'Daily'),
        ('weekly', 'Weekly'),
        ('monthly', 'Monthly'),
        ('quarterly', 'Quarterly'),
        ('yearly', 'Yearly'),
    ], string='Analytics Period', default='monthly',
       help='Period for analytics calculations')
    company_id = fields.Many2one(
        'res.company',
        string='Company',
        default=lambda self: self.env.company,
        required=True,
        index=True,
        ondelete='restrict'
    )

    @api.depends('room_ids')
    def _compute_room_count(self):
        for record in self:
            record.room_count = len(record.room_ids)

    @api.depends('amenity_ids')
    def _compute_amenity_count(self):
        for record in self:
            record.amenity_count = len(record.amenity_ids)

    @api.depends('room_ids', 'base_price')
    def _compute_revenue_analytics(self):
        """Compute revenue analytics for room type"""
        for record in self:
            # This is a placeholder - in real implementation, 
            # you would query actual booking/revenue data
            record.total_revenue = 0.0
            record.monthly_revenue = 0.0
            record.daily_revenue = 0.0
            record.average_daily_rate = record.base_price
            record.revenue_per_available_room = record.base_price

    @api.depends('room_ids')
    def _compute_occupancy_analytics(self):
        """Compute occupancy analytics for room type"""
        for record in self:
            # This is a placeholder - in real implementation,
            # you would query actual occupancy data
            record.occupancy_rate = 0.0
            record.monthly_occupancy_rate = 0.0
            record.total_nights_sold = 0
            record.monthly_nights_sold = 0
            record.average_length_of_stay = 0.0

    @api.depends('room_ids')
    def _compute_performance_metrics(self):
        """Compute performance metrics for room type"""
        for record in self:
            # This is a placeholder - in real implementation,
            # you would query actual booking performance data
            record.booking_count = 0
            record.monthly_booking_count = 0
            record.cancellation_rate = 0.0
            record.no_show_rate = 0.0
            record.customer_satisfaction_score = 0.0

    @api.depends('base_price')
    def _compute_pricing_analytics(self):
        """Compute pricing analytics for room type"""
        for record in self:
            record.min_price = record.base_price
            record.max_price = record.base_price
            record.price_variance = 0.0
            record.seasonal_demand_factor = 1.0

    @api.depends('room_ids', 'base_price')
    def _compute_market_analytics(self):
        """Compute market analytics for room type"""
        for record in self:
            # This is a placeholder - in real implementation,
            # you would query market data and competitor analysis
            record.market_share = 0.0
            record.competitive_index = 50.0
            record.demand_forecast = 0.0

    @api.depends('room_ids')
    def _compute_maintenance_info(self):
        """Compute maintenance information for room type"""
        for record in self:
            # This is a placeholder - in real implementation,
            # you would query actual maintenance data
            record.last_maintenance_date = False
            record.maintenance_due = False

    @api.depends('total_revenue', 'monthly_revenue', 'occupancy_rate')
    def _compute_analytics_timestamp(self):
        """Compute analytics timestamp"""
        for record in self:
            record.last_updated_analytics = fields.Datetime.now()

    @api.model_create_multi
    def create(self, vals_list):
        """Override create to ensure code uniqueness"""
        for vals in vals_list:
            if 'code' in vals and vals['code']:
                vals['code'] = vals['code'].upper()
        return super().create(vals_list)

    def write(self, vals):
        """Override write to ensure code uniqueness"""
        if 'code' in vals and vals['code']:
            vals['code'] = vals['code'].upper()
        return super().write(vals)

    def action_view_rooms(self):
        """Action to view rooms of this room type"""
        self.ensure_one()
        return {
            'type': 'ir.actions.act_window',
            'name': f'Rooms - {self.name}',
            'res_model': 'hotel.room',
            'view_mode': 'list,kanban,form',
            'domain': [('room_type_id', '=', self.id)],
            'context': {'default_room_type_id': self.id},
        }

    @api.model
    def get_room_types_with_availability(self, start_date, end_date):
        """Get room types with availability count for booking integration"""
        room_types = self.search([])
        result = []
        
        for room_type in room_types:
            available_rooms = self.env['hotel.room'].get_available_rooms(
                start_date, end_date, room_type.id
            )
            
            result.append({
                'room_type_id': room_type.id,
                'name': room_type.name,
                'code': room_type.code,
                'max_occupancy': room_type.max_occupancy,
                'base_price': room_type.base_price,
                'currency_id': room_type.currency_id.id,
                'available_count': len(available_rooms),
                'total_rooms': room_type.room_count,
                'available_rooms': available_rooms,
            })
        
        return result

    @api.model
    def get_room_type_pricing(self, room_type_id, start_date, end_date):
        """Get room type pricing for booking integration"""
        room_type = self.browse(room_type_id)
        if not room_type.exists():
            return None
        
        # Calculate total nights
        start = fields.Date.from_string(start_date)
        end = fields.Date.from_string(end_date)
        nights = (end - start).days
        
        return {
            'room_type_id': room_type.id,
            'name': room_type.name,
            'code': room_type.code,
            'base_price': room_type.base_price,
            'currency_id': room_type.currency_id.id,
            'nights': nights,
            'total_price': room_type.base_price * nights,
            'max_occupancy': room_type.max_occupancy,
            'amenities': room_type.amenities,
        }

    @api.model
    def get_room_type_availability_summary(self, start_date, end_date):
        """Get availability summary for all room types (integration point)"""
        # Handle empty dates gracefully
        if not start_date or not end_date:
            start_date = fields.Date.today()
            end_date = fields.Date.today() + timedelta(days=30)
        
        room_types = self.search([])
        summary = {
            'total_room_types': len(room_types),
            'total_rooms': sum(rt.room_count for rt in room_types),
            'available_rooms': 0,
            'total_availability_rate': 0,
            'room_types': []
        }
        
        for room_type in room_types:
            try:
                available_rooms = self.env['hotel.room'].get_available_rooms(
                    start_date, end_date, room_type.id
                )
                
                room_type_data = {
                    'room_type_id': room_type.id,
                    'name': room_type.name,
                    'code': room_type.code,
                    'total_rooms': room_type.room_count,
                    'available_rooms': len(available_rooms),
                    'availability_rate': (len(available_rooms) / room_type.room_count * 100) if room_type.room_count > 0 else 0,
                }
                
                summary['room_types'].append(room_type_data)
                summary['available_rooms'] += len(available_rooms)
            except Exception as e:
                # Log error but continue with other room types
                import logging
                _logger = logging.getLogger(__name__)
                _logger.warning(f"Error processing room type {room_type.name}: {e}")
                continue
        
        # Calculate total hotel availability percentage
        if summary['total_rooms'] > 0:
            summary['total_availability_rate'] = (summary['available_rooms'] / summary['total_rooms']) * 100
        
        return summary

    @api.model
    def get_analytics_summary(self, start_date=None, end_date=None):
        """Get comprehensive analytics summary for all room types"""
        if not start_date:
            start_date = fields.Date.today()
        if not end_date:
            end_date = fields.Date.today() + timedelta(days=30)
        
        room_types = self.search([])
        summary = {
            'total_room_types': len(room_types),
            'total_rooms': sum(rt.room_count for rt in room_types),
            'total_revenue': sum(rt.total_revenue for rt in room_types),
            'average_occupancy': sum(rt.occupancy_rate for rt in room_types) / len(room_types) if room_types else 0,
            'room_types': []
        }
        
        for room_type in room_types:
            room_type_data = {
                'id': room_type.id,
                'name': room_type.name,
                'code': room_type.code,
                'room_count': room_type.room_count,
                'total_revenue': room_type.total_revenue,
                'monthly_revenue': room_type.monthly_revenue,
                'occupancy_rate': room_type.occupancy_rate,
                'average_daily_rate': room_type.average_daily_rate,
                'revenue_per_available_room': room_type.revenue_per_available_room,
                'booking_count': room_type.booking_count,
                'cancellation_rate': room_type.cancellation_rate,
                'customer_satisfaction_score': room_type.customer_satisfaction_score,
                'is_premium': room_type.is_premium,
                'is_suite': room_type.is_suite,
            }
            summary['room_types'].append(room_type_data)
        
        return summary

    @api.model
    def get_revenue_analytics(self, start_date=None, end_date=None):
        """Get revenue analytics for room types"""
        if not start_date:
            start_date = fields.Date.today()
        if not end_date:
            end_date = fields.Date.today() + timedelta(days=30)
        
        room_types = self.search([])
        revenue_data = {
            'total_revenue': 0,
            'monthly_revenue': 0,
            'daily_revenue': 0,
            'average_daily_rate': 0,
            'revenue_per_available_room': 0,
            'room_types': []
        }
        
        for room_type in room_types:
            room_type_revenue = {
                'id': room_type.id,
                'name': room_type.name,
                'total_revenue': room_type.total_revenue,
                'monthly_revenue': room_type.monthly_revenue,
                'daily_revenue': room_type.daily_revenue,
                'average_daily_rate': room_type.average_daily_rate,
                'revenue_per_available_room': room_type.revenue_per_available_room,
            }
            revenue_data['room_types'].append(room_type_revenue)
            revenue_data['total_revenue'] += room_type.total_revenue
            revenue_data['monthly_revenue'] += room_type.monthly_revenue
            revenue_data['daily_revenue'] += room_type.daily_revenue
        
        if room_types:
            revenue_data['average_daily_rate'] = sum(rt.average_daily_rate for rt in room_types) / len(room_types)
            revenue_data['revenue_per_available_room'] = sum(rt.revenue_per_available_room for rt in room_types) / len(room_types)
        
        return revenue_data

    @api.model
    def get_occupancy_analytics(self, start_date=None, end_date=None):
        """Get occupancy analytics for room types"""
        if not start_date:
            start_date = fields.Date.today()
        if not end_date:
            end_date = fields.Date.today() + timedelta(days=30)
        
        room_types = self.search([])
        occupancy_data = {
            'total_occupancy_rate': 0,
            'total_nights_sold': 0,
            'average_length_of_stay': 0,
            'room_types': []
        }
        
        for room_type in room_types:
            room_type_occupancy = {
                'id': room_type.id,
                'name': room_type.name,
                'occupancy_rate': room_type.occupancy_rate,
                'monthly_occupancy_rate': room_type.monthly_occupancy_rate,
                'total_nights_sold': room_type.total_nights_sold,
                'monthly_nights_sold': room_type.monthly_nights_sold,
                'average_length_of_stay': room_type.average_length_of_stay,
            }
            occupancy_data['room_types'].append(room_type_occupancy)
            occupancy_data['total_nights_sold'] += room_type.total_nights_sold
        
        if room_types:
            occupancy_data['total_occupancy_rate'] = sum(rt.occupancy_rate for rt in room_types) / len(room_types)
            occupancy_data['average_length_of_stay'] = sum(rt.average_length_of_stay for rt in room_types) / len(room_types)
        
        return occupancy_data

    @api.model
    def get_performance_analytics(self, start_date=None, end_date=None):
        """Get performance analytics for room types"""
        if not start_date:
            start_date = fields.Date.today()
        if not end_date:
            end_date = fields.Date.today() + timedelta(days=30)
        
        room_types = self.search([])
        performance_data = {
            'total_bookings': 0,
            'total_cancellations': 0,
            'total_no_shows': 0,
            'average_satisfaction': 0,
            'room_types': []
        }
        
        for room_type in room_types:
            room_type_performance = {
                'id': room_type.id,
                'name': room_type.name,
                'booking_count': room_type.booking_count,
                'monthly_booking_count': room_type.monthly_booking_count,
                'cancellation_rate': room_type.cancellation_rate,
                'no_show_rate': room_type.no_show_rate,
                'customer_satisfaction_score': room_type.customer_satisfaction_score,
            }
            performance_data['room_types'].append(room_type_performance)
            performance_data['total_bookings'] += room_type.booking_count
        
        if room_types:
            performance_data['average_satisfaction'] = sum(rt.customer_satisfaction_score for rt in room_types) / len(room_types)
        
        return performance_data

    @api.model
    def get_market_analytics(self, start_date=None, end_date=None):
        """Get market analytics for room types"""
        if not start_date:
            start_date = fields.Date.today()
        if not end_date:
            end_date = fields.Date.today() + timedelta(days=30)
        
        room_types = self.search([])
        market_data = {
            'total_market_share': 0,
            'average_competitive_index': 0,
            'total_demand_forecast': 0,
            'room_types': []
        }
        
        for room_type in room_types:
            room_type_market = {
                'id': room_type.id,
                'name': room_type.name,
                'market_share': room_type.market_share,
                'competitive_index': room_type.competitive_index,
                'demand_forecast': room_type.demand_forecast,
            }
            market_data['room_types'].append(room_type_market)
            market_data['total_market_share'] += room_type.market_share
            market_data['total_demand_forecast'] += room_type.demand_forecast
        
        if room_types:
            market_data['average_competitive_index'] = sum(rt.competitive_index for rt in room_types) / len(room_types)
        
        return market_data

    def action_view_analytics(self):
        """Action to view analytics for this room type"""
        self.ensure_one()
        return {
            'type': 'ir.actions.act_window',
            'name': f'Analytics - {self.name}',
            'res_model': 'hotel.room.type',
            'view_mode': 'form',
            'res_id': self.id,
            'target': 'current',
            'context': {'default_room_type_id': self.id},
        }

    def action_view_amenities(self):
        """Action to view amenities for this room type"""
        self.ensure_one()
        return {
            'type': 'ir.actions.act_window',
            'name': f'Amenities - {self.name}',
            'res_model': 'hotel.amenity',
            'view_mode': 'list,kanban,form',
            'domain': [('id', 'in', self.amenity_ids.ids)],
            'context': {'default_room_type_id': self.id},
        }

    def action_refresh_analytics(self):
        """Action to refresh analytics data"""
        self.ensure_one()
        # Trigger recomputation of analytics fields
        self._compute_revenue_analytics()
        self._compute_occupancy_analytics()
        self._compute_performance_metrics()
        self._compute_pricing_analytics()
        self._compute_market_analytics()
        self._compute_maintenance_info()
        
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': _('Analytics Refreshed'),
                'message': _('Analytics data for %s has been refreshed.') % self.name,
                'type': 'success',
                'sticky': False,
            }
        }

    _sql_constraints = [
        ('code_unique', 'UNIQUE(code)', 'Room type code must be unique!'),
        ('name_unique', 'UNIQUE(name)', 'Room type name must be unique!'),
    ]
